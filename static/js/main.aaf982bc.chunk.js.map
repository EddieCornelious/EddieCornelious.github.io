{"version":3,"sources":["images/manuels.PNG","images/realtor.PNG","images/stream.PNG","images/gym.PNG","components/Loader.js","components/skills_data.js","components/project_data.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Loader","react_default","a","createElement","className","data","1","title","skills","font","2","3","4","info","img_src","manuels","github","url","wick","stream","fitness","Header","React","lazy","Promise","all","e","then","bind","About","Skills","Projects","Footer","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loadedHero","_this2","setTimeout","renderLoadedApp","setState","Fragment","Suspense","fallback","skillsData","projectsData","components_Loader","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aaf982bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/manuels.ed432c90.PNG\";","module.exports = __webpack_public_path__ + \"static/media/realtor.386b5f9f.PNG\";","module.exports = __webpack_public_path__ + \"static/media/stream.e08083f6.PNG\";","module.exports = __webpack_public_path__ + \"static/media/gym.1a43c40f.PNG\";","import \"../styles/Loader.scss\";\r\nimport React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\">\r\n        <div className=\"inner one\" />\r\n        <div className=\"inner two\" />\r\n        <div className=\"inner three\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","const data = {\r\n  \"1\": {\r\n    title: \"FRONT END\",\r\n    skills: [\"HTML5\", \"CSS|SASS\", \"JavaScript\", \"React|Redux\"],\r\n    font: \"fab fa-internet-explorer\"\r\n  },\r\n  \"2\": {\r\n    title: \"SERVER\",\r\n    skills: [\"NodeJS\", \"Express\", \"NPM\", \"CORS\"],\r\n    font: \"fas fa-server\"\r\n  },\r\n  \"3\": {\r\n    title: \"DATABASE\",\r\n    skills: [\"MySQL\", \"MongoDB\", \"SQL Lite\", \"SQL\"],\r\n    font: \"fas fa-database\"\r\n  },\r\n  \"4\": {\r\n    title: \"DEPLOYMENT\",\r\n    skills: [\"TravisCI\", \"Git\", \"Heroku\", \"GitHub\"],\r\n    font: \"fas fa-cloud\"\r\n  }\r\n};\r\n\r\nexport default data;\r\n","import manuels from \"../images/manuels.PNG\";\r\nimport wick from \"../images/realtor.PNG\";\r\nimport stream from \"../images/stream.PNG\";\r\nimport fitness from \"../images/gym.PNG\";\r\n\r\nconst data = {\r\n  3: {\r\n    title: \"Manuel's\",\r\n    info:\r\n      \"A restaurant site I built for a client using HTML, CSS, and React. I also used NPM and Node JS on the backend\",\r\n    img_src: manuels,\r\n    github: \"https://github.com/EddieCornelious/restaurant\",\r\n    url: \"https://www.manuelsgrill.com\"\r\n  },\r\n  1: {\r\n    title: \"John & Wrink\",\r\n    info:\r\n      \"A real-estate site I built for a client using HTML, Node JS, CSS, and React. I really wanted to focus on the design for this site\",\r\n    img_src: wick,\r\n    github: \"https://github.com/EddieCornelious/homes\",\r\n    url: \"https://www.johnandwrink.com\"\r\n  },\r\n  2: {\r\n    title: \"DashBoard Box\",\r\n    info:\r\n      \"A dashboard/portal for that allows users to view popular Twitch games and streams live and sort or filter results based on certain criteria\",\r\n    img_src: stream,\r\n    github: \"https://github.com/EddieCornelious/stream\",\r\n    url: \"https://eddiecornelious.github.io/stream/\"\r\n  },\r\n  4: {\r\n    title: \"Xenos Fitness\",\r\n    info:\r\n      \"A site I built for a fitness center that uses HTML, CSS, and React. I also used NPM and Node JS on the backend\",\r\n    img_src: fitness,\r\n    github: \"https://github.com/EddieCornelious/fitness\",\r\n    url: \"https://www.xenosfitness.com\"\r\n  }\r\n};\r\n\r\nexport default data;\r\n","import \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"../styles/App.scss\";\r\n\r\nimport React from \"react\";\r\nimport Loader from \"./Loader.js\";\r\nimport skillsData from \"./skills_data.js\";\r\nimport projectsData from \"./project_data.js\";\r\n\r\nconst Header = React.lazy(() => import(\"./Header.js\"));\r\nconst About = React.lazy(() => import(\"./About.js\"));\r\nconst Skills = React.lazy(() => import(\"./Skills.js\"));\r\nconst Projects = React.lazy(() => import(\"./Projects.js\"));\r\nconst Footer = React.lazy(() => import(\"./Footer.js\"));\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loadedHero: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.renderLoadedApp();\r\n    }, 500);\r\n  }\r\n\r\n  renderLoadedApp() {\r\n    this.setState({\r\n      loadedHero: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.loadedHero) {\r\n      return <Loader />;\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <React.Suspense fallback={<div>&nbsp;</div>}>\r\n          <Header />\r\n\r\n          <About />\r\n\r\n          <Skills data={skillsData} />\r\n\r\n          <Projects data={projectsData} />\r\n\r\n          <Footer />\r\n        </React.Suspense>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./components/App.js\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}